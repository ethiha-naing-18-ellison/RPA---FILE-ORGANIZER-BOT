#!/usr/bin/env python3
"""
Test script for File Organizer Bot
Creates sample files and tests the organization functionality
"""

import os
import tempfile
import shutil
from pathlib import Path
from file_organizer_bot import FileOrganizerBot


def create_test_files(test_folder):
    """Create sample files for testing"""
    print(f"📂 Creating test files in: {test_folder}")
    
    # Sample files with different extensions
    test_files = [
        # PDFs
        "document.pdf",
        "manual.pdf",
        
        # Images
        "photo.jpg",
        "image.png",
        "screenshot.gif",
        "picture.jpeg",
        
        # Excel files
        "spreadsheet.xlsx",
        "budget.xls",
        
        # Word documents
        "letter.docx",
        "notes.doc",
        
        # PowerPoint presentations
        "presentation.pptx",
        "slides.ppt",
        
        # Text files
        "readme.txt",
        "config.txt",
        
        # Other files
        "data.csv",
        "script.py",
        "style.css",
        "index.html",
        "archive.zip"
    ]
    
    created_files = []
    for filename in test_files:
        file_path = os.path.join(test_folder, filename)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(f"Test content for {filename}\n")
                f.write("Generated by File Organizer Bot test suite\n")
            created_files.append(filename)
        except Exception as e:
            print(f"❌ Failed to create {filename}: {str(e)}")
    
    print(f"✅ Created {len(created_files)} test files")
    return created_files


def create_duplicate_files(test_folder):
    """Create duplicate files to test rename functionality"""
    print("📁 Creating duplicate files...")
    
    duplicates = ["document.pdf", "photo.jpg", "spreadsheet.xlsx"]
    
    for filename in duplicates:
        file_path = os.path.join(test_folder, filename)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(f"DUPLICATE: {filename}\n")
                f.write("This should be renamed during organization\n")
            print(f"  Created duplicate: {filename}")
        except Exception as e:
            print(f"❌ Failed to create duplicate {filename}: {str(e)}")


def test_organization_manually(test_folder):
    """Test the organizer by calling it programmatically"""
    print("\n🧪 Testing File Organization")
    print("-" * 40)
    
    # Create a mock organizer that doesn't use GUI
    class TestableOrganizer(FileOrganizerBot):
        def get_folder_from_user(self):
            # Return the test folder instead of showing GUI
            return test_folder
        
        def run(self):
            # Override to skip GUI dialogs
            try:
                folder_path = self.get_folder_from_user()
                if not folder_path:
                    return False
                
                if not os.path.exists(folder_path):
                    print(f"❌ Selected folder does not exist: {folder_path}")
                    return False
                
                success = self.organize_files(folder_path)
                
                if success:
                    self.print_summary()
                    return True
                
                return False
                
            except Exception as e:
                print(f"❌ Unexpected error: {str(e)}")
                return False
    
    # Run the test
    organizer = TestableOrganizer()
    return organizer.run()


def verify_results(test_folder):
    """Verify that files were organized correctly"""
    print("\n🔍 Verifying organization results...")
    
    organized_path = os.path.join(test_folder, "Organized_Files")
    
    if not os.path.exists(organized_path):
        print("❌ Organized_Files folder was not created!")
        return False
    
    # Check categories
    expected_categories = ['PDFs', 'Images', 'Excel', 'Word', 'PowerPoint', 'Text', 'Others']
    found_categories = []
    
    for item in os.listdir(organized_path):
        item_path = os.path.join(organized_path, item)
        if os.path.isdir(item_path):
            found_categories.append(item)
    
    print(f"📁 Found categories: {sorted(found_categories)}")
    
    # Count files in each category
    total_organized = 0
    for category in found_categories:
        category_path = os.path.join(organized_path, category)
        files_in_category = [f for f in os.listdir(category_path) 
                           if os.path.isfile(os.path.join(category_path, f))]
        total_organized += len(files_in_category)
        print(f"   • {category}: {len(files_in_category)} files")
        
        # Show a few examples
        if files_in_category:
            examples = files_in_category[:3]
            for example in examples:
                print(f"     - {example}")
    
    print(f"\n📊 Total files organized: {total_organized}")
    
    # Check for remaining files in source
    remaining_files = []
    for item in os.listdir(test_folder):
        item_path = os.path.join(test_folder, item)
        if os.path.isfile(item_path):
            remaining_files.append(item)
    
    if remaining_files:
        print(f"⚠️  Files remaining in source: {remaining_files}")
    else:
        print("✅ All files successfully organized!")
    
    return total_organized > 0


def main():
    """Main test function"""
    print("🧪 File Organizer Bot - Test Suite")
    print("=" * 50)
    
    # Create temporary test directory
    test_folder = tempfile.mkdtemp(prefix="file_organizer_test_")
    print(f"📁 Test directory: {test_folder}")
    
    try:
        # Create test files
        created_files = create_test_files(test_folder)
        
        if not created_files:
            print("❌ No test files were created. Exiting.")
            return
        
        # Create some duplicates
        create_duplicate_files(test_folder)
        
        # Test the organization
        success = test_organization_manually(test_folder)
        
        if success:
            # Verify results
            verification_success = verify_results(test_folder)
            
            if verification_success:
                print("\n🎉 ALL TESTS PASSED!")
                print("File Organizer Bot is working correctly.")
            else:
                print("\n❌ VERIFICATION FAILED!")
                print("Files were not organized as expected.")
        else:
            print("\n❌ ORGANIZATION TEST FAILED!")
        
        print(f"\n📁 Test files are available for inspection at:")
        print(f"   {test_folder}")
        
        # Ask if user wants to keep test files
        try:
            keep = input("\nKeep test files for manual inspection? (y/n): ").lower().strip()
            if keep != 'y':
                shutil.rmtree(test_folder)
                print("🗑️  Test files cleaned up.")
            else:
                print("📁 Test files preserved.")
        except KeyboardInterrupt:
            print(f"\n📁 Test files preserved at: {test_folder}")
    
    except Exception as e:
        print(f"❌ Test failed with error: {str(e)}")
        print(f"📁 Test directory: {test_folder}")


if __name__ == "__main__":
    main()